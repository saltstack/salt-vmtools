name: Test Windows
on:
  workflow_call:
    inputs:
      distro-slug:
        type: string
        required: true
        description: The Distribution Slug

      display-name:
        type: string
        required: true
        description: The Display Name For The Job

      runs-on:
        type: string
        required: true
        description: The GitHub Windows Worker To Run Workflow On

      instances:
        type: string
        required: true
        description: The Instances To Test

      container-slug:
        type: string
        required: true
        description: The Container Slug

      timeout:
        type: number
        required: false
        default: 20
        description: The timeout(in minutes) for the workflow

jobs:
  Test:
    name: ${{ matrix.instance }}
    runs-on: windows-latest
    timeout-minutes: ${{ inputs.timeout }}
    strategy:
      fail-fast: false
      matrix:
        instance: ${{ fromJSON(inputs.instances) }}

    steps:
      - uses: actions/checkout@v4

      - name: Test SVT Minion Script
        run: |
          # Make sure we can run the script
          Write-Host "Run Script (no parameters)"
          try { .\windows\svtminion.ps1 | Out-Null } catch {} finally { if ( $LASTEXITCODE -ne 126 ) { Write-Host "Failed to execute"; exit 1 } else { $LASTEXITCODE = 0 } }
          # Make sure we can display help
          Write-Host "Run Script (display help)"
          try { .\windows\svtminion.ps1 -Help | Out-Null } catch {} finally { if ( $LASTEXITCODE -ne 0 ) { Write-Host "Status not 0"; exit 1 } }
          # Make sure we get a status
          Write-Host "Run Script (get status)"
          try { .\windows\svtminion.ps1 -Status | Out-Null } catch {} finally { if ( $LASTEXITCODE -ge 100 ) { $LASTEXITCODE = 0 } else { Write-Host "Status: $LASTEXITCODE"; exit 1 } }
          # Running functional tests (must be run with powershell -file)
          Write-Host "Run Unit Tests"
          powershell -file .\tests\windows\runtests.ps1
          # Running integration tests (must be run with powershell -file)
          Write-Host "Run Integration Tests"
          powershell -file .\tests\windows\runtests.ps1 -Integration

      - name: Set Exit Status
        if: always()
        run: |
          mkdir exitstatus
          echo "${{ job.status }}" > exitstatus/${{ github.job }}-${{ matrix.instance }}-${{ inputs.distro-slug }}

      - name: Upload Exit Status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: exitstatus-${{ github.job }}-${{ matrix.instance }}-${{ inputs.distro-slug }}
          path: exitstatus/
