
---
stages:
  - lint
  - pre-commit
  - build_svt
  - test_svt

variables:
  PLUGIN_PACKAGES: "*.sh"
  CICD_UPSTREAM_PATH: "saltstack/open/salt-vm-tools"
  CICD_SALT_SCRIPT_VERSION: "0.2"
  CICD_SALT_SCRIPT_COMP_VERSION: "0.2.0"
  CICD_SALT_SCRIPT_RELEASE: "1"
  CICD_SALT_SCRIPT_DATE: "Thu Jan 1 1970"
  CICD_SALT_SCRIPT_BRANCH: "main"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID == null

include:
  - project: saltstack/pop/cicd/ci-templates
    file: /lint/pre-commit-run-all.yml

default:
  before_script:
    - mkdir /root/ || true
    - echo "machine gitlab.com login gitlab-ci-token password ${CI_JOB_TOKEN}" >> ~/.netrc

build-salt-vmtools:
  stage: build_svt
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - metadata.json
      - svtminion.sh
    expire_in: 120 days
#    reports:
#      dotenv: build.env
  image: centos:7
         ## almalinux:8
  script:
    # assumes running as root
    - oldpwd=$(pwd)
    # setup environment vars
    - export CICD_SALT_SCRIPT_DATE=$(date +"%a %b %0d %Y")
    # generate sha256 for metadata.json file
    - cd linux
    - cp linux_metadata.json metadata.json
    - sed -i -e 's&SALT_SCRIPT_VERSION&'${CICD_SALT_SCRIPT_VERSION}'&' metadata.json
    - sed -i -e 's&SALT_SCRIPT_COMP_VERSION&'${CICD_SALT_SCRIPT_COMP_VERSION}'&' metadata.json
    - svtminion_sha256=$(sha256sum svtminion.sh | cut -d ' ' -f 1)
    - sed -i -e 's&SVTMINION_SHA256&'${svtminion_sha256}'&' metadata.json
    - hsalt_call_sha256=$(sha256sum salt-call | cut -d ' ' -f 1)
    - sed -i -e 's&HELPER_SALT_CALL_SHA256&'${hsalt_call_sha256}'&' metadata.json
    - hsalt_minion_sha256=$(sha256sum salt-minion | cut -d ' ' -f 1)
    - sed -i -e 's&HELPER_SALT_MINION_SHA256&'${hsalt_minion_sha256}'&' metadata.json
    - salt_minion_service_sha256=$(sha256sum salt-minion | cut -d ' ' -f 1)
    - sed -i -e 's&SALT_MINION_SERVICE_SHA256&'${salt_minion_service_sha256}'&' metadata.json
    - cat metadata.json
    - cp -f metadata.json ${oldpwd}/metadata.json
    - cp -f svtminion.sh ${oldpwd}/svtminion.sh

  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


build-tags-salt-vmtools:
  stage: build_svt
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - metadata.json
      - svtminion.sh
    expire_in: 120 days
#    reports:
#      dotenv: build.env
  image: centos:7
         ## almalinux:8
  script:
    # assumes running as root
    - oldpwd=$(pwd)
    # setup environment vars
    - export CICD_SALT_SCRIPT_DATE=$(date +"%a %b %0d %Y")
    # generate sha256 for metadata.json file
    - cd linux
    - cp linux_metadata.json metadata.json
    # expect tag of version form x.y-z where -z is release number
    - export CICD_SALT_SCRIPT_VERSION=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 1)
    - export CICD_SALT_SCRIPT_RELEASE=$(echo "${CI_COMMIT_TAG}" | sed s/v// | cut -d '-' -f 2)
    ## ensure if no release number given default to 1
    - if [[ "${CICD_SALT_SCRIPT_VERSION}" = "${CICD_SALT_SCRIPT_RELEASE}" ]]; then export CICD_SALT_SCRIPT_RELEASE=1; fi
    - sed -i -e 's&SALT_SCRIPT_VERSION&'${CICD_SALT_SCRIPT_VERSION}'&' metadata.json
    - sed -i -e 's&SALT_SCRIPT_COMP_VERSION&'${CICD_SALT_SCRIPT_VERSION}.${CICD_SALT_SCRIPT_RELEASE}'&' metadata.json
    - svtminion_sha256=$(sha256sum svtminion.sh | cut -d ' ' -f 1)
    - sed -i -e 's&SVTMINION_SHA256&'${svtminion_sha256}'&' metadata.json
    - hsalt_call_sha256=$(sha256sum salt-call | cut -d ' ' -f 1)
    - sed -i -e 's&HELPER_SALT_CALL_SHA256&'${hsalt_call_sha256}'&' metadata.json
    - hsalt_minion_sha256=$(sha256sum salt-minion | cut -d ' ' -f 1)
    - sed -i -e 's&HELPER_SALT_MINION_SHA256&'${hsalt_minion_sha256}'&' metadata.json
    - salt_minion_service_sha256=$(sha256sum salt-minion | cut -d ' ' -f 1)
    - sed -i -e 's&SALT_MINION_SERVICE_SHA256&'${salt_minion_service_sha256}'&' metadata.json
    - cat metadata.json
    - cp -f metadata.json ${oldpwd}/metadata.json
    - cp -f svtminion.sh ${oldpwd}/svtminion.sh

  rules:
    - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
      when: always
    - when: never


test-salt-vmtools:
  stage: test_svt
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    expire_in: 120 days
  needs:
    - job: build-salt-vmtools
  image: centos:7
  script:
    - pwd
    - id
    - ls -alh svtminion.sh
    - mystatus=$(./svtminion.sh --depend)
    - mystatus=$(./svtminion.sh --status)
    - if [[ "${mystatus}" -ne 2 ]]; then echo "should be not installed"; exit 1; fi
    - ./svtminion.sh --install
    - ls -alh /opt/saltstack/salt/run/
    - ls -alh /usr/bin/salt-call
    - ls -alh /usr/bin/salt-minion
    - sudo -u root /usr/bin/salt-call --local test.versions
    - sudo -u root /usr/bin/salt-call --local grains.items
    - sudo -u root /usr/bin/salt-call --local cmd.run "ls -al /"
    - mystatus=$(./svtminion.sh --status)
    - if [[ "${mystatus}" -ne 0 ]]; then echo "should be installed"; exit 1; fi
    - ./svtminion.sh --remove
    - list_dirs_to_chk_removed="/opt/saltstack /etc/salt /var/run/salt /var/cache/salt /var/log/salt"
    - for idx in ${list_dirs_to _chk_removed}; do if [[ -d "${idx}" ]]; then echo "directory ${idx} is left after a remove"; exit 1; fi; done
    - list_files_to_chk_removed="/usr/bin/salt-call /usr/bin/salt-minion /usr/lib/systemd/system/salt-minion.service /etc/systemd/system/salt-minion.service"
    - for idx in ${list_files_to_chk_removed}; do if [[ -f "${idx}" ]]; then echo "file ${idx} is left after a remove"; exit 1; fi; done
    - mystatus=$(./svtminion.sh --status)
    - if [[ "${mystatus}" -ne 2 ]]; then echo "should be not installed"; exit 1; fi

  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


test-tags-salt-vmtools:
  stage: test_svt
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    expire_in: 120 days
  needs:
    - job: build-tags-salt-vmtools
  image: centos:7
  script:
    - oldpwd=$(pwd)
    - id
    - ls -alh svtminion.sh
    - mystatus=$(./svtminion.sh --depend)
    - mystatus=$(./svtminion.sh --status)
    - if [[ "${mystatus}" -ne 2 ]]; then echo "should be not installed"; exit 1; fi
    - ./svtminion.sh --install
    - ls -alh /opt/saltstack/salt/run/
    - ls -alh /usr/bin/salt-call
    - ls -alh /usr/bin/salt-minion
    - sudo -u root /usr/bin/salt-call --local test.versions
    - sudo -u root /usr/bin/salt-call --local grains.items
    - sudo -u root /usr/bin/salt-call --local cmd.run "ls -al /"
    - mystatus=$(./svtminion.sh --status)
    - if [[ "${mystatus}" -ne 0 ]]; then echo "should be installed"; exit 1; fi
    - ./svtminion.sh --remove
    - list_dirs_to_chk_removed="/opt/saltstack /etc/salt /var/run/salt /var/cache/salt /var/log/salt"
    - for idx in ${list_dirs_to _chk_removed}; do if [[ -d "${idx}" ]]; then echo "directory ${idx} is left after a remove"; exit 1; fi; done
    - list_files_to_chk_removed="/usr/bin/salt-call /usr/bin/salt-minion /usr/lib/systemd/system/salt-minion.service /etc/systemd/system/salt-minion.service"
    - for idx in ${list_files_to_chk_removed}; do; if [[ -f "${idx}" ]]; then echo "file ${idx} is left after a remove"; exit 1; fi; done
    - mystatus=$(./svtminion.sh --status)
    - if [[ "${mystatus}" -ne 2 ]]; then echo "should be not installed"; exit 1; fi

  rules:
    - if: "$CI_COMMIT_TAG != null && $CI_PROJECT_PATH == $CICD_UPSTREAM_PATH"
      when: always
    - when: never
